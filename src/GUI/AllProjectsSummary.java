/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import sk.stu.fiit.Loader;
import sk.stu.fiit.Priorities;
import sk.stu.fiit.Project;
import sk.stu.fiit.User;

/**
 *
 * @author patoh
 */
public class AllProjectsSummary extends javax.swing.JFrame {

    /**
     * Creates new form AllProjectsSummary
     */
    private User user;
    
    public AllProjectsSummary(User user) {
        this.user = user;
        initComponents();
        setProjectValues();
         
        
    }
    
    public AllProjectsSummary(){
        user = null;
        initComponents();
        Loader.addProject(new Project("nazov", Priorities.NORMAL, "taag", "idde", "popiis"));
        setProjectValues();
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(51, 102, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        projectList.setFixedCellHeight(100);
        projectList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(projectList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        
    }//GEN-LAST:event_formPropertyChange

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
       
    }//GEN-LAST:event_formComponentResized

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Loader.saveDimension(this.getClass().getName(), this.getSize());
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       try{
            this.setPreferredSize(Loader.lookupDimension(this.getClass().getName()));
            pack();
        }catch(Exception ex){
           
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllProjectsSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllProjectsSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllProjectsSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllProjectsSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllProjectsSummary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Project> projectList;
    // End of variables declaration//GEN-END:variables

  private void setProjectValues(){
        
//        DefaultTableModel model  = (DefaultTableModel) projectTable.getModel();
//        projectTable.setDefaultRenderer(projectTable.getColumnClass(0), new ProjectDetailTableCellRender());
//        
//        Loader.getProjects().values().forEach(project ->{
//            if(user == null || project.hasUser(user)){
//                model.addRow(new Object[] {project});
//            }
//        });
        
     DefaultListModel model  = new DefaultListModel();
        
        projectList.setCellRenderer(new MyCellRenderer());
        
        Loader.getProjects().values().forEach(project ->{
            if(user == null || project.hasUser(user)){
                model.addElement(project);
            }
        });
        
        projectList.setModel(model);
    }

}

class ProjectDetailTableCellRender implements TableCellRenderer{

   
    private User user;
    
    public ProjectDetailTableCellRender(User user){
        this.user = user;
    }
    
    public ProjectDetailTableCellRender(){
        user = null;
    }
    
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        
        JPanel projectDetail = new ProjectTableItem((Project) value);
        
        if(isSelected){
            table.setForeground(table.getSelectionForeground());
            table.setBackground(table.getSelectionBackground());
            projectDetail.setForeground(Color.red);
            projectDetail.setBackground(Color.BLUE);
        }else {
          table.setForeground(table.getForeground());
          table.setBackground(table.getBackground());
          projectDetail.setForeground(table.getForeground());
          projectDetail.setBackground(new Color(204,204,255));
        }
        
        return projectDetail;
        
    }
    
      
    
}


 class MyCellRenderer extends JPanel implements ListCellRenderer<Object> {
     public MyCellRenderer() {
         setOpaque(true);
     }

    @Override
    public Component getListCellRendererComponent(JList<? extends Object> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        JPanel projectDetail = new ProjectTableItem((Project) value);
        
        if(isSelected){
            list.setForeground(list.getSelectionForeground());
            list.setBackground(list.getSelectionBackground());
            projectDetail.setForeground(Color.red);
            projectDetail.setBackground(Color.BLUE);
        }else {
          list.setForeground(list.getForeground());
          list.setBackground(list.getBackground());
          projectDetail.setForeground(list.getForeground());
          projectDetail.setBackground(new Color(204,204,255));
        }
        
        return projectDetail;
    }

     
}
